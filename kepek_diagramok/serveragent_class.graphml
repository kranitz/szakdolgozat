<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:java="http://www.yworks.com/xml/yfiles-common/1.0/java" xmlns:sys="http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0" xmlns:x="http://www.yworks.com/xml/yfiles-common/markup/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
  <!--Created by yEd 3.14.4-->
  <key attr.name="Description" attr.type="string" for="graph" id="d0"/>
  <key for="port" id="d1" yfiles.type="portgraphics"/>
  <key for="port" id="d2" yfiles.type="portgeometry"/>
  <key for="port" id="d3" yfiles.type="portuserdata"/>
  <key attr.name="url" attr.type="string" for="node" id="d4"/>
  <key attr.name="description" attr.type="string" for="node" id="d5"/>
  <key for="node" id="d6" yfiles.type="nodegraphics"/>
  <key for="graphml" id="d7" yfiles.type="resources"/>
  <key attr.name="url" attr.type="string" for="edge" id="d8"/>
  <key attr.name="description" attr.type="string" for="edge" id="d9"/>
  <key for="edge" id="d10" yfiles.type="edgegraphics"/>
  <graph edgedefault="directed" id="G">
    <data key="d0"/>
    <node id="n0">
      <data key="d4"/>
      <data key="d5"/>
      <data key="d6">
        <y:UMLClassNode>
          <y:Geometry height="552.25" width="463.58333333333337" x="-29.583333333333343" y="-53.5"/>
          <y:Fill color="#FFCC00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="13" fontStyle="bold" hasBackgroundColor="false" hasLineColor="false" height="19.1328125" modelName="custom" textColor="#000000" visible="true" width="95.94580078125" x="183.81876627604169" y="3.0">ServerAgent<y:LabelModel>
              <y:SmartNodeLabelModel distance="4.0"/>
            </y:LabelModel>
            <y:ModelParameter>
              <y:SmartNodeLabelModelParameter labelRatioX="0.0" labelRatioY="0.0" nodeRatioX="0.0" nodeRatioY="-0.03703090122767855" offsetX="0.0" offsetY="0.0" upX="0.0" upY="-1.0"/>
            </y:ModelParameter>
          </y:NodeLabel>
          <y:UML clipContent="true" constraint="" omitDetails="false" stereotype="" use3DEffect="true">
            <y:AttributeLabel>self._agent_name
self._network_thread
self._registered_clients
self._thread_pool
self._test_client
self._test_client_name
self._initialized</y:AttributeLabel>
            <y:MethodLabel>def __init__(self,
                 message_listener: MessageListener,
                 server_queue: ServerQueue,
                 lg_server: NetworkServer,
                 network_module: NetworkThread
                 )
def initialize(self)
def start_web_server(self, configuration: dict)
def create_group(self, group_name: str)
def group_exists(self, group_name)
def delete_group(self, group_name: str)
def get_groups(self)
def add_agents_to_group(self, group_name, agent_names)
def delete_agent_from_group(self, group_name: str, agent_name: str)
def get_group_members(self, group_name)
def list_group_members(self, group_name)
def register_agent(self, agent_name: str, ip_address: str, port_number: str)
def get_next_message(self, agent_name: str)
def agent_with_name_exists(self, agent_name: str)
def remove_logout_agent(self, agent_name: str)
def add_connected_agent(self, agent_data: tuple)
def get_connected_clients(self)
def start(self)
def register_message_listener(self, message_listener)
def stop(self)
def send(self, message: str, to_agent: str)
def broadcast_message_to_agents(self, message: str)
def send_stop_to_all_agents(self)
def shutdown(self)</y:MethodLabel>
          </y:UML>
        </y:UMLClassNode>
      </data>
    </node>
  </graph>
  <data key="d7">
    <y:Resources/>
  </data>
</graphml>
